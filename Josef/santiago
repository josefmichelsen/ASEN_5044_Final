clear; 
close all; 
clc;
rng("default")
load("orbitdeterm_finalproj_KFdata.mat");

% Constants
mu = 398600; % Standard gravitational parameter [km^3/s^2]
R_e = 6378; % Radius of the Earth [km]
omega_e = 2 * pi / 86400; % Turning rate of Earth [rad/s]
dt = 10;

% Initial Conditions
X_0 = 6678; % [km]
r_0 = X_0; % [km]
Y_0 = 0; % [km]
X_d_0 = 0; % [km/s]
Y_d_0 = sqrt(mu/r_0); % [km/s]
initial_conditions = [X_0; X_d_0; Y_0; Y_d_0];

% Initial ground station positions
stations = 1:12;
theta_0 = (stations - 1) .* pi/6;
% X_s_0 = R_e .* cos(theta_0);
% Y_s_0 = R_e .* sin(theta_0);
% 
% [X_t, Y_t] = getTrackingStationPos(omega_e, theta_0, R_e, tvec);

perturb_x0 = [0; 0.075; 0; -0.021];
initial_conditions_cont = initial_conditions + perturb_x0;
options = odeset('RelTol', 1e-12, 'AbsTol', 1e-12);

[t_cont, x_cont] = ode45(@(t, y)satelliteEOM(t, y, mu), tvec, initial_conditions, options);
y = getY(x_cont(:,1), x_cont(:,2), x_cont(:,3), x_cont(:,4), theta_0, tvec);
% plotQ1(t_cont, x_cont, y)

[t_cont_noPerturb, x_cont_noPerturb] = ode45(@(t, y)satelliteEOM(t, y, mu), tvec, initial_conditions, options);



lx1 = 6678; % X value to linearize around
lx3 = 0; % Y value to linearize around

denom = @(X_0,Y_0) ((X_0^2)+(Y_0^2))^(5/2);

A_bar_func = @(X_0,Y_0) [0, 1, 0, 0; ...
                    (2*mu*(X_0^2)-mu*(Y_0)^2)/denom(X_0,Y_0), 0, (3*mu*X_0*Y_0)/denom(X_0,Y_0), 0; ...
                    0, 0, 0, 1; ...
                    (3*mu*X_0*Y_0)/denom(X_0,Y_0), 0, (2*mu*(Y_0^2)-mu*(X_0)^2)/denom(X_0,Y_0), 0];

A_bar = A_bar_func(X_0, Y_0);

Fpert = eye(4) + dt .* A_bar;

B_bar = [0, 0;...
        1, 0;...
        0, 0;...
        0, 1];

x_perturb = nan(4, length(tvec));
x_perturb(:,1) = perturb_x0;

% x_disc = nan(4, length(tvec));
% x_disc(:,1) = initial_conditions;% + perturb_x0;

for i = 1:length(tvec)-1
    Fpert = eye(4) + dt .* A_bar_func(x_cont_noPerturb(i,1), x_cont_noPerturb(i,3));
    x_perturb(:,i+1) = Fpert * x_perturb(:, i);

    % x_disc(:,i+1) = Fpert * x_disc(:, i);
    % x_disc(:,i+1) = F * x_disc(:, i) + x_perturb(:, i);
end

x_combo = x_cont_noPerturb' + x_perturb;

y_linear_disc = getYLinear(x_perturb, x_cont_noPerturb ,theta_0, tvec, y);
% y_linear_disc = getYLinear(x_combo, x_cont_noPerturb ,theta_0, tvec);
% y_disc = getY(x_combo(1,:)', x_combo(2,:)', x_combo(3,:)', x_combo(4,:)', theta_0, tvec);
% plotQ1(t_cont, x_combo, y_disc)
rho = @(x, xs, y, ys) sqrt((x - xs)^2 + (y - ys)^2);

% plotQ1(t_cont, x_combo, y_linear_disc)
c = @(x,xs,xd,xds,y,ys,yd,yds) [(x-xs)/rho(x,xs,y,ys), 0, (y-ys)/rho(x,xs,y,ys), 0; ...
    ((xd-xds)*rho(x,xs,y,ys)^2-(x-xs)*((x-xs)*(xd-xds)+(y-ys)*(yd-yds)))/rho(x,xs,y,ys)^3, (x-xs)/rho(x,xs,y,ys), ((yd-yds)*rho(x,xs,y,ys)^2-(y-ys)*((x-xs)*(xd-xds)+(y-ys)*(yd-yds)))/rho(x,xs,y,ys)^3, (y-ys)/rho(x,xs,y,ys);...
    -(y-ys)/rho(x,xs,y,ys)^2, 0, (x-xs)/rho(x,xs,y,ys)^2, 0];
% c = @(x,xs,xd,xds,y,ys,yd,yds) [(x-xs)/rho(x,xs,y,ys), 0, (y-ys)/rho(x,xs,y,ys), 0; ...
%      ((y-ys)*((y-ys)*(xd-xds)-(x-xs)*(yd-yds)))/rho(x,xs,y,ys)^3, (x-xs)/rho(x,xs,y,ys), ((x-xs)*((x-xs)*(yd-yds)-(y-ys)*(xd-xds)))/rho(x,xs,y,ys)^3, (y-ys)/rho(x,xs,y,ys);...
%      -(y-ys)/(rho(x,xs,y,ys)^2), 0, (x-xs)/(rho(x,xs,y,ys)^2),0];


% plotStates(tvec, x_perturb)
close all


%Extended Kalman Filter NEES/NIS


pnoise=mvnrnd([0 0 0 0],chol([Qtrue zeros(2,2);zeros(2,2) Qtrue],"lower"))';
xt(:,1)=initial_conditions+pnoise;
ytrue = getY(xt(1,1), xt(2,1), xt(3,1), xt(4,1), theta_0, tvec(1));
temp=[];
for s=1:12
    if ~isnan(cell2mat(ytrue(s,1)))
        temp=[temp [cell2mat(ytrue(s,1));s]];
    end
yt{1}=temp;
end    
for ss=1:60
for ii=2:length(tvec)
pnoise=mvnrnd([0 0 0 0],[Qtrue zeros(2,2);zeros(2,2) Qtrue])';
[t_cont, x_true] = ode45(@(t, y)satelliteEOM(t, y, mu), [tvec(ii-1) tvec(ii)], xt(:,ii-1), options);
xt(:,ii)=x_true(end,:)'+pnoise;
ytrue = getY(xt(1,ii), xt(2,ii), xt(3,ii), xt(4,ii), theta_0, tvec(ii));

temp=[];
for s=1:12
    if ~isnan(cell2mat(ytrue(s,1)))
        temp=[temp [cell2mat(ytrue(s,1));s]];
    end
    try
        yt{ii}=temp;
    catch
        yt{ii}=yt{ii};
    end
end
temp=[];
end

% [t_cont, x_cont] = ode45(@(t, y)satelliteEOM(t, y, mu), tvec, initial_conditions_cont, options);
% y = getY(x_cont(:,1), x_cont(:,2), x_cont(:,3), x_cont(:,4), theta_0, tvec);

%Step 1: Initialization: start with some initial estimate of total state and covariance
%for s=1:100
[X_s, X_s_d, Y_s, Y_s_d] = getTrackingStationStates(theta_0, tvec);


P_plus{1}=diag([1e3 10 1e3 10]);
P_plus{1}=diag([5e-5 5e-5 5e-5 5e-5]);
x_plus(:,1)=initial_conditions+mvnrnd([0 0 0 0],P_plus{1})';
%Step 2: set k=0
ydata=yt;
ex{ss,1}=(x_plus(:,1)-xt(:,1))'*(P_plus{1}^-1)*(x_plus(:,1)-xt(:,1));
y_minus=getY2(x_plus(1,1), x_plus(2,1),x_plus(3,1), x_plus(4,1), theta_0, tvec(1));
H=c(x_plus(1,1),X_s(1,1),x_plus(2,1),X_s_d(1,1),x_plus(3,1),Y_s(1,1),x_plus(4,1),Y_s_d(1,1));
ypre=cell2mat(y_minus(1));
temp=cell2mat(ydata(1));
e=temp(1:3,:)-ypre;
innov=H*P_plus{1}*H'+Rtrue;
ey{ss,1}=e'*(innov^-1)*e;
k{1}=0;


%Step 3: Time update/prediction step for time k+1:
omega=dt*[0 0;1 0;0 0;0 1];

%Qt=[9e-2 0;0 9.999e-7];
%nees Qt=[5e-3 0;0 5e-6];
Qt=[1e-10 0;0 4.85e-11];
for i=2:length(tvec)
initial_conditions_cont=x_plus(:,i-1);
[t_cont, x_con] = ode45(@(t, y)satelliteEOM(t, y, mu),[tvec(i-1),tvec(i)], initial_conditions_cont, options);
x_minus(:,i)=x_con(end,:);
F = eye(4) + dt .* A_bar_func(x_plus(1,i-1), x_plus(3,i-1));
P_minus{i}=F*P_plus{i-1}*F'+[Qt zeros(2,2);zeros(2,2) Qt];
y_minus=getY2(x_minus(1,i), x_minus(2,i),x_minus(3,i), x_minus(4,i), theta_0, tvec(i));

data=cell2mat(ydata(i));
if ~isempty(data)
station=data(end,:);
e=[];
H=[];
R=[];
for j=1:length(station)
ypre=y_minus{station(j)};
% if isnan(ypre)
%     ypre=[0;0;0];
% end
e=[e;data(1:3,j)-ypre];
H=[H;c(x_minus(1,i),X_s(station(j),i),x_minus(2,i),X_s_d(station(j),i),x_minus(3,i),Y_s(station(j),i),x_minus(4,i),Y_s_d(station(j),i))];
end
l=length(station);
if l==1
    R=Rtrue;
elseif l==2
    R=[Rtrue zeros(3,3);zeros(3,3) Rtrue];
else
    R=[Rtrue zeros(3,6);zeros(3,3) Rt zeros(3,3); zeros(3,6) Rtrue];
end
k{i}=P_minus{i}*H'*((H*P_minus{i}*H'+R)^-1);
innov=H*P_minus{i}*H';
ey{ss,i}=e'*(innov^-1)*e;
ny(ss,i)=length(e);
x_plus(:,i)=x_minus(:,i)+k{i}*e;
P_plus{i}=(eye(4)-k{i}*H)*P_minus{i};
else
ey{ss,i}=ey{ss,i-1};
ny(ss,i)=ny(ss,i-1);
x_plus(:,i)=x_minus(:,i);
P_plus{i}=P_plus{i-1};
end
ex{ss,i}=(xt(:,i)-x_plus(:,i))'*(P_plus{i}^-1)*(xt(:,i)-x_plus(:,i));
% figure(1)
% hold on 
% plot(x_plus(1,i),x_plus(3,i),'o',"MarkerSize",6)
end
%xfinal{s}=x_plus;
end
meanex=mean(cell2mat(ex),1);
nx=4.*ones(size(tvec));
meaney=mean(cell2mat(ey),1);
ny=ceil(mean(ny,1));
alpha=0.01;
r1x=chi2inv(alpha/2,ss.*nx)./ss;
r2x=chi2inv(1-(alpha/2),ss.*nx)./ss;
r1y=chi2inv(alpha/2,ss.*ny)./ss;
r2y=chi2inv(1-(alpha/2),ss.*ny)./ss;
figure(1)
scatter(tvec, meanex)
hold on
plot(tvec,r1x,'r')
plot(tvec,r2x,'r')
ylim([0 10])
title('NEES Test for 60 Monte Carlo Simulations', 'interpreter', 'latex', 'fontSize', 20);
xlabel('Time[s]', 'interpreter', 'latex', 'fontSize', 16);
ylabel('NEES', 'interpreter', 'latex', 'fontSize', 16);

figure(2)
scatter(tvec, meaney)
hold on
plot(tvec,r1y,'r')
plot(tvec,r2y,'r')
ylim([0 10])
title('NIS Test for 60 Monte Carlo Simulations', 'interpreter', 'latex', 'fontSize', 20);
xlabel('Time[s]', 'interpreter', 'latex', 'fontSize', 16);
ylabel('NIS', 'interpreter', 'latex', 'fontSize', 16);

yt=reprocessy(yt);
plotQ1(tvec,xt,yt)
% figure(3)
% plot(x_plus(1,:),x_plus(3,:))
% hold on
% %plot(xt(1,:),xt(3,:))
% x_cont=x_cont';

%%%

%Extended Kalman Filter
load("orbitdeterm_finalproj_KFdata.mat");

%Step 1: Initialization: start with some initial estimate of total state and covariance
%for s=1:100
x_plus(:,1)=initial_conditions;
P_plus{1}=diag([5e3 10 5e3 10]);

%Step 2: set k=0

k{1}=0;
t(1)=0;
Qt=[1e-10 0 0 0;0 4.8e-11 0 0;0 0 1e-10 0; 0 0 0 4.8e-11];
Rt=Rtrue;
%Step 3: Time update/prediction step for time k+1:
omega=dt*[0 0;1 0;0 0;0 1];
[X_s, X_s_d, Y_s, Y_s_d] = getTrackingStationStates(theta_0, tvec);


for i=2:1401
t(i)=t(i-1)+10;
initial_conditions_cont=x_plus(:,i-1);
[t_cont, x_con] = ode45(@(t, y)satelliteEOM(t, y, mu),[t(i-1),t(i)], initial_conditions_cont, options);
x_minus(:,i)=x_con(end,:);
F = eye(4) + dt .* A_bar_func(x_plus(1,i-1), x_plus(3,i-1));
P_minus{i}=F*P_plus{i-1}*F'+Qt;
y_minus=getY2(x_minus(1,i), x_minus(2,i),x_minus(3,i), x_minus(4,i), theta_0, t(i));

data=cell2mat(ydata(i));
if ~isempty(data)
station=data(end,:);
e=[];
H=[];
R=[];
for j=1:length(station)
ypre=y_minus{station(j)};
% if isnan(ypre)
%     ypre=[0;0;0];
% end
e=[e;data(1:3,j)-ypre];
H=[H;c(x_minus(1,i),X_s(station(j),i),x_minus(2,i),X_s_d(station(j),i),x_minus(3,i),Y_s(station(j),i),x_minus(4,i),X_s_d(station(j),i))];
end
l=length(station);
if l==1
    R=Rt;
elseif l==2
    R=[Rt zeros(3,3);zeros(3,3) Rt];
else
    R=[Rt zeros(3,6);zeros(3,3) Rt zeros(3,3); zeros(3,6) Rt];
end
k{i}=P_minus{i}*H'*((H*P_minus{i}*H'+R)^-1);
x_plus(:,i)=x_minus(:,i)+k{i}*e;
P_plus{i}=(eye(4)-k{i}*H)*P_minus{i};
else
x_plus(:,i)=x_minus(:,i);
P_plus{i}=P_plus{i-1};
end
end
e1=[];
e2=[];
e3=[];
e4=[];
for i=1:length(tvec)
P=P_plus{i};
e1(i)=sqrt(P(1,1));
e2(i)=sqrt(P(2,2));
e3(i)=sqrt(P(3,3));
e4(i)=sqrt(P(4,4));
end    
figure(6)
subplot(4,1,1)
plot(tvec,x_plus(1,:))
hold on
plot(tvec,x_plus(1,:)+2.*e1,'r--')
plot(tvec,x_plus(1,:)-2.*e1,'r--')
title('X Position vs Time', 'interpreter', 'latex', 'fontSize', 20);
xlabel('Time[s]', 'interpreter', 'latex', 'fontSize', 16);
ylabel('X Position[Km]', 'interpreter', 'latex', 'fontSize', 16);

subplot(4,1,2)
plot(tvec,x_plus(2,:))
hold on
plot(tvec,x_plus(2,:)+2.*e2,'r--')
plot(tvec,x_plus(2,:)-2.*e2,'r--')
title('X Velocity vs Time', 'interpreter', 'latex', 'fontSize', 20);
xlabel('Time[s]', 'interpreter', 'latex', 'fontSize', 16);
ylabel('X Velocity[Km/s]', 'interpreter', 'latex', 'fontSize', 16);


subplot(4,1,3)
plot(tvec,x_plus(3,:))
hold on
plot(tvec,x_plus(3,:)+2.*e3,'r--')
plot(tvec,x_plus(3,:)-2.*e3,'r--')
title('Y Position vs Time', 'interpreter', 'latex', 'fontSize', 20);
xlabel('Time[s]', 'interpreter', 'latex', 'fontSize', 16);
ylabel('Y Position[Km]', 'interpreter', 'latex', 'fontSize', 16);

subplot(4,1,4)
plot(tvec,x_plus(4,:))
hold on
plot(tvec,x_plus(4,:)+2.*e4,'r--')
plot(tvec,x_plus(4,:)-2.*e4,'r--')
title('Y Velocity vs Time', 'interpreter', 'latex', 'fontSize', 20);
xlabel('Time[s]', 'interpreter', 'latex', 'fontSize', 16);
ylabel('Y Velocity[Km/s]', 'interpreter', 'latex', 'fontSize', 16);

figure(7)
plot(tvec(1:50),x_plus(1,(1:50)))
hold on
plot(tvec(1:50),x_plus(1,(1:50))+2.*e1(1:50),'r--')
plot(tvec(1:50),x_plus(1,(1:50))-2.*e1(1:50),'r--')
title('X Position vs Time', 'interpreter', 'latex', 'fontSize', 20);
xlabel('Time[s]', 'interpreter', 'latex', 'fontSize', 16);
ylabel('X Position[Km]', 'interpreter', 'latex', 'fontSize', 16);

figure(8)
plot(tvec(1:50),x_plus(2,(1:50)))
hold on
plot(tvec(1:50),x_plus(2,(1:50))+2.*e2(1:50),'r--')
plot(tvec(1:50),x_plus(2,(1:50))-2.*e2(1:50),'r--')
title('X Velocity vs Time', 'interpreter', 'latex', 'fontSize', 20);
xlabel('Time[s]', 'interpreter', 'latex', 'fontSize', 16);
ylabel('X Velocity[Km/s]', 'interpreter', 'latex', 'fontSize', 16);


figure(9)
plot(tvec(1:50),x_plus(3,(1:50)))
hold on
plot(tvec(1:50),x_plus(3,(1:50))+2.*e3(1:50),'r--')
plot(tvec(1:50),x_plus(3,(1:50))-2.*e3(1:50),'r--')
title('Y Position vs Time', 'interpreter', 'latex', 'fontSize', 20);
xlabel('Time[s]', 'interpreter', 'latex', 'fontSize', 16);
ylabel('Y Position[Km]', 'interpreter', 'latex', 'fontSize', 16);

figure(10)
plot(tvec(1:50),x_plus(4,(1:50)))
hold on
plot(tvec(1:50),x_plus(4,(1:50))+2.*e4(1:50),'r--')
plot(tvec(1:50),x_plus(4,(1:50))-2.*e4(1:50),'r--')
title('Y Velocity vs Time', 'interpreter', 'latex', 'fontSize', 20);
xlabel('Time[s]', 'interpreter', 'latex', 'fontSize', 16);
ylabel('Y Velocity[Km/s]', 'interpreter', 'latex', 'fontSize', 16);





